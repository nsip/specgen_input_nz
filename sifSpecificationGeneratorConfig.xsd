<?xml version="1.0" encoding="utf-8"?>

<!-- additions made by Stuart McGrigor (SIF New Zealand) - March/April 2018

   added globalSettings:
       - jsonExamplesXslt - when present, use the XSLT script to generate JSON samples alongside the XML samples in HTML output.
       - resolveExtensions - when true include inherited elements and attributes in HTML output and diagrams
           for CommonElements that are extensions of other CommonElements.
       - isDraft - when true use the sifWorkingDraft gif in top left of HTML output;
           
       - documentEnumerationsCompletely - Both CodeSet/Values/Value/Text and CodeSet/Values/Value/Description go into final XSD;  
            Text as xs:annotation/xs:appinfo/label
            Description as xs:annotation/xs:documentation 

       - defaultExample - when doing XML & JSON examples; which one is the 'default' that shows when first opening HTML doc?
       
   add xsltTransformations:
           - each xsltTransformation causes an XSL-T job to run, transforming SIF_DataModel.input.xml against given
           xsltInput script and placing resultant xsltOutputFile in xsltOutputDir  xsl:params are:
           - sifVersion - the value of schemaVersion from global settings
           - sifLocale  - the value of Intl from gloabl settings (uppercase)

           - yamlToJson if true = means the XSLT job wrote a YAML file, so also produce the JSON equivalent in xsltOutputDir


-->
<!-- More additions made by Vince Paredes 2018 - 2019

	new globalSettings:
		- isDraft - when true the draft sidebar and other accoutrement are displayed in the html. When missing or false,
					official spec branding is used.
		- includeCEDS - when true the code reads ceds URL and ceds Id text from the input. It includes the information in	
						in the XSDs as annotations and displays it in the html documents.
		- examplesValidatorFile - when present this allows the code to find the file used to validate examples in the 
								  html text. It should be a path relative to the 'out\{locale code} directory, such as:
								  'XSD\Schema_NoIncludes_Lax\SIF_Message.xsd'. If it is missing, the default directory
								  of '"XSD\SIF_MessageNoIncludes\SIF_Message.xsd' is used. Use back slashes as in the example
								  above. 
-->

<!-- Stuart McGrigor - June 2019 
 
   new GlobalSettings enumLanguages:
	 		<enumLanguages>
			<language>
				<tag>en</tag>
				<name>English</name>
			</language>
			<language>
				<tag>mi</tag>
				<name>Te Reo MƒÅori</name>
			</language>
		</enumLanguages>

		Allows us to have multiple Value/Text and Value/Description tags, with different xml:lang tags.
-->

<xs:schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:ns1="http://www.sifassociation.org/sifSpecificationGenerator/1.0" targetNamespace="http://www.sifassociation.org/sifSpecificationGenerator/1.0" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:element name="sifSpecificationGeneratorConfig">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="globalSettings">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="inputDocument" type="xs:normalizedString"/>   
							<xs:element name="sifNamespace" type="xs:normalizedString"/>
							<xs:element name="localizationCode" type="xs:normalizedString"/>
							<xs:element name="schemaVersion" type="xs:normalizedString"/>
							<xs:element name="jsonExamplesXslt" type="xs:normalizedString"/>
							<xs:element name="resolveExtensions" type="xs:boolean"/>
							<xs:element name="isDraft" type="xs:boolean"/>
              <xs:element name="documentEnumerationsCompletely" type="xs:boolean"/>
              <xs:element name="enumLanguages" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="language" minOccurs="1" maxOccurs="unbounded">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="tag">
                            <xs:simpleType>
                              <xs:restriction base="xs:string">
                                <xs:length value="2"/>
                              </xs:restriction>
                            </xs:simpleType>
                          </xs:element>
                          <xs:element name="name" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
							<xs:element name="includeCEDS" type="xs:boolean"/>
							<xs:element name="examplesValidatorFile" type="xs:normalizedString" minOccurs="0"/>  
              <xs:element name="defaultExample">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:enumeration value="XML"/>   <!-- first enumeration is default value if no setting in XML file -->
                    <xs:enumeration value="JSON"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="htmlDocuments">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="htmlDocument" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="singleDocument" type="xs:boolean"/>
										<xs:element name="rootDocumentFileName" type="xs:normalizedString"/>
										<xs:element name="rootTitle" type="xs:normalizedString"/>
										<xs:element name="documentType">
											<xs:simpleType>
												<xs:restriction base="xs:string">
													<xs:enumeration value="DataModel"/>
													<xs:enumeration value="Infrastructure"/>
													<xs:enumeration value="Combined"/>
												</xs:restriction>
											</xs:simpleType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="webServiceDocuments" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="webServiceDocument" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="singleDocument" type="xs:boolean"/>
										<xs:element name="rootDocumentFileName" type="xs:normalizedString"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="xsdDocuments">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="xsdDocument" minOccurs="0" maxOccurs="unbounded">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="xsdTitle" type="xs:normalizedString"/>
										<xs:element name="diagram" type="xs:boolean"/>
										<xs:element name="isDataModelXsd" type="xs:boolean"/>
										<xs:element name="singleSchema" type="xs:boolean"/>
										<xs:element name="annotate" type="xs:boolean"/>
										<xs:element name="listWithKeyConstraints" type="xs:boolean"/>
										<xs:element name="isSifMessage2Xsd" type="xs:boolean"/>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>

        <xs:element name="xsltTransformations" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="xsltTransformation" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="xsltInputFile" type="xs:normalizedString"/>
                    <xs:element name="xsltOutputDir" type="xs:normalizedString"/>
                    <xs:element name="xsltOutputFile" type="xs:normalizedString"/>
                    <xs:element name="yamlToJson"     type="xs:boolean"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
</xs:schema>
